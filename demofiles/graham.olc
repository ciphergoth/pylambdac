# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Various expressions of Graham's Number
# https://mindsarentmagic.org/2012/11/22/lambda-graham/
# https://mindsarentmagic.org/2020/02/19/a-picture-of-grahams-number/

# Version from my original blog post of 2012 - 120 bits
#draw (λc2 c3.(λc4. c3 c4 (λn. n (λf b. b f (λx. x)) (λb f. c3 (b f)) c3) c4) (c2 c2)) (λf x. f (f x)) (λf x. f (f (f x)))

# Failed optimization - cache 4 - 117 bits
#draw (λc4 c3. c3 c4 (λn. n (λf b. b f (λx. x)) (λb f. c3 (b f)) c3) c4) (λf x. f (f (f x))) ((λx. x x)(λf x. f (f x)))

# New best version - 116 bits
let c1 = λx. x;
let c3 = λf x. f (f (f x));
let c2 = λf x. f (f x);
let c4 = c2 c2;
let c64 = c3 c4;
let times = λa b f. a (b f);
let upify = λf b. b f c1;
let uparrow = λn a b. n upify (times a) b;
let grahamf = λn. uparrow n c3 c3;
let graham = c64 grahamf c4;
draw graham;

# draw (λc3 c2. c3 (c2 c2) (λn. n (λf b. b f (λx. x)) (λb f. c3 (b f)) c3) (c2 c2)) (λf x. f (f (f x))) (λf x. f (f x));

# Bigger number in fewer bits - 83 bits
# draw (λc2. (λg. g (g (g (g c2)))) (λn. n (λf b. b f (λx. x)) (λb. b c2) c2)) (λf x. f (f x))
