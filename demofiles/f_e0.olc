# Church integers
let c0 = λf x. x;
let c1 = λx. x;
let c2 = λf x. f (f x);
let c3 = λf x. f (f (f x));
let c4 = λf x. f (f (f (f x)));
let csucc = λn f x. n f (f x);

# all limit ordinals have fundamental sequences here.
# A function F on ordinals we define in three parts z s l:
# F(0) = z
# F(α + 1) = s F(α)
# F(α) = l (λi. F(α[i])) where α is a limit ordinal
# We define an ordinal as a thing that calculates F given z s l
# F(α) = α z s l
# Let T be whatever type F returns
# F: o -> T
# z: T
# s: T -> T
# l: (church -> T) -> T
# So o = T -> (T -> T) -> ((church -> T) -> T) -> T

# o0: o
let o0 = λz s l. z;
# osucc: o -> o
let osucc = λo z s l. s (o z s l);

let o1 = osucc o0;
let o2 = osucc o1;
let o3 = osucc o2;

# olim: (church -> o) -> o
let olim = λf z s l. l (λi. f i z s l);
# omega: o
let omega = olim λn. n osucc o0;

# For a continuous function, where where α is a limit ordinal
# F(α)[n] = F(α[n]) so l is just olim

# oadd: o -> o -> o
# a + 0 = a, a + (b + 1) = (a + b) + 1
let oadd = λa b. b a osucc olim;

# C combinator, swap arguments to function
let C = λf x y. f y x;

# omul: o -> o -> o
# a * 0 = 0, a * (b + 1) = (a * b) + a
let omul = λa b. b o0 (C oadd a) olim;

# opow: o -> o -> o
# a^0 = 1, a^{b + 1} = a^b * a
let opow = λa b. b o1 (C omul a) olim;

# First fixed point of f >= o where f strictly increasing, continuous
# fixedp: (o -> o) -> o -> o
let fixedp = λf o. olim λn. n f o;

let epsilon0 = fixedp (opow omega) o0;

# fast-growing function
# fgf: o -> church -> church
let fgh = λ o. o csucc (λ f n. n f n) (λf n. f n n);

let f_0 = fgh o0 c4;
draw f_0;

let f_1 = fgh o1 c4;
draw f_1;

let f_2 = fgh o2 c4;
draw f_2;

let f_omega = fgh omega c4;
draw f_omega;

let f_omega1 = fgh (osucc omega) c4;
draw f_omega1;

let f_e0 = fgh (osucc epsilon0) c4;
draw f_e0;
