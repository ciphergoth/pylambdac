#!/usr/bin/env python3

import argparse
import pathlib

import lterm
import parse

def verbose_reduce(expr, symbols):
    while True:
        print("    ", expr)
        next = expr.reduce_once(symbols)
        if next is None:
            return expr
        expr = next

def try_file(tf):
    print(f"==== {tf}")
    symbols = {"Y": lterm.MagicY("Y")}
    directives = parse.parse_directives(tf.read_text())
    for d in directives.children:
        if d.data == "let":
            name, value = d.children
            symbols[name.value] = value
            print(f"let {name.value} = {value}")
        elif d.data == "reduce":
            verbose_reduce(d.children[0], symbols)
            print()

def parse_args():
    p = argparse.ArgumentParser(allow_abbrev=False)
    p.add_argument("olcfile", nargs='*', type=pathlib.Path)
    return p.parse_args()

def main():
    args = parse_args()
    for tf in args.olcfile:
        try_file(tf)

if __name__ == '__main__':
    main()
