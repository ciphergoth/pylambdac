#!/usr/bin/env python3
# Copyright 2018 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import argparse
import pathlib

import draw
import lterm
import markcode
import parse

def flatten_symbols(name, symbols):
    expr = symbols[name]
    while True:
        free = expr.variables(True)
        if not free:
            #print(f"flat: {expr}")
            return expr
        #print(f"flattening {expr}")
        subst = None
        for p in symbols.items():
            if p[0] in free:
                subst = p
        if subst == None:
            print(f"Defies flattening: {expr}")
            print(f"Free variables: {free}")
            return None
        if subst[0] in subst[1].variables(True):
            print(f"Recursive: {expr}")
            return None
        #print(f"substituting {subst[0]} = {subst[1]}")
        expr = lterm.Apply(lterm.Lambda(subst[0], expr), subst[1])

def optimize(expr):
    while True:
        newexpr = expr.optimize()
        if newexpr is None:
            return expr
        expr = newexpr
        print(f"optimized: {expr}")

class Processor:
    def __init__(self, args):
        self._args = args
        self._symbols = {}

    def do_let(self, name, value):
        print(f"let {name.value} = {value}")
        assert name.value not in self._symbols
        self._symbols[name.value] = value

    def do_magic(self, name, mtype):
        print(f"magic {name.value} {mtype.value}")
        assert name.value not in self._symbols
        self._symbols[name.value] = lterm.get_magic(name.value, mtype.value)

    def do_reduce(self, expr):
        print(f"reduce {expr}")
        while True:
            print("    ", expr)
            next = expr.reduce_once(self._symbols)
            if next is None:
                print()
                return
            expr = next

    def do_draw(self, name):
        print(f"draw {name}")
        expr = flatten_symbols(name, self._symbols)
        if expr is None:
            return
        print(f"flattened: {expr}")
        expr = optimize(expr)
        draw.draw_expr(3, expr).print()
        print(f"{expr.size()} bits")
        if self._args.outdir:
            self._args.outdir.mkdir(parents=True, exist_ok=True)
            draw.draw_expr(4, expr).write_image(self._args.outdir / f"{name}.png")

def file_text(tf):
    if tf.suffix == ".md":
        with tf.open() as fp:
            return markcode.blockcodes_as_string(fp)
    else:
        return tf.read_text()

def try_file(tf, args):
    print(f"==== {tf}")
    directives = parse.parse_directives(file_text(tf))
    processor = Processor(args)
    for directive in directives.children:
        getattr(processor, f"do_{directive.data}")(*directive.children)

def parse_args():
    p = argparse.ArgumentParser(allow_abbrev=False)
    p.add_argument("--outdir", type=pathlib.Path)
    p.add_argument("olcfile", nargs='*', type=pathlib.Path)
    return p.parse_args()

def main():
    args = parse_args()
    for tf in args.olcfile:
        try_file(tf, args)

if __name__ == '__main__':
    main()
