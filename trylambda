#!/usr/bin/env python3
# Copyright 2018 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import argparse
import pathlib

import draw
import lterm
import parse

def verbose_reduce(expr, symbols):
    while True:
        print("    ", expr)
        next = expr.reduce_once(symbols)
        if next is None:
            return expr
        expr = next

def flatten_symbols(expr, symbols):
    while True:
        free = expr.variables(True)
        if not free:
            print(f"flat: {expr}")
            return expr
        print(f"flattening {expr}")
        for p in symbols.items():
            if p[0] in free:
                subst = p
        print(f"substituting {subst[0]} = {subst[1]}")
        expr = lterm.Apply(lterm.Lambda(subst[0], expr), subst[1])

def measure_size(expr):
    score = 0
    for t in expr._prefixcode(lterm.SearchableStack()):
        if t == "." or t == "Î»^":
            score += 2
        elif t == "^":
            pass
        else:
            score += 2 + int(t)
    return score

def try_file(tf):
    print(f"==== {tf}")
    symbols = {}
    directives = parse.parse_directives(tf.read_text())
    for d in directives.children:
        if d.data == "let":
            name, value = d.children
            assert name.value not in symbols
            symbols[name.value] = value
            print(f"let {name.value} = {value}")
        elif d.data == "magic":
            name, type = d.children
            assert name.value not in symbols
            symbols[name.value] = lterm.get_magic(name.value, type.value)
            print(f"magic {name.value} {type.value}")
        elif d.data == "draw":
            expr = flatten_symbols(d.children[0], symbols)
            grid = draw.draw_expr(expr)
            grid.print()
            print(f"{measure_size(expr)} bits")
        elif d.data == "reduce":
            verbose_reduce(d.children[0], symbols)
            print()

def parse_args():
    p = argparse.ArgumentParser(allow_abbrev=False)
    p.add_argument("olcfile", nargs='*', type=pathlib.Path)
    return p.parse_args()

def main():
    args = parse_args()
    for tf in args.olcfile:
        try_file(tf)

if __name__ == '__main__':
    main()
