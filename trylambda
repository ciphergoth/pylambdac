#!/usr/bin/env python3

import pathlib

import lark

import lterm

top = pathlib.Path(__file__).parent
grammar = (top / "grammar.lark").read_text()
expr_parser = lark.Lark(grammar, start='expr', parser='lalr')
file_parser = lark.Lark(grammar, start='directives', parser='lalr')

@lark.v_args(inline=True)
class Transformer(lark.Transformer):
    def var(self, v):
        return lterm.Var(v.value)

    def apply(self, a, b):
        return lterm.Apply(a, b)

    def mlambda(self, vars, e):
        res = e
        for v in reversed(vars.children):
            res = lterm.Lambda(v.value, res)
        return res

transf = Transformer()

def checkexpr(expr):
    print("==============")
    print(expr)
    newexpr = transf.transform(expr_parser.parse(str(expr)))
    print(" ".join(expr.prefixcode()))
    print(" ".join(newexpr.prefixcode()))
    assert expr == newexpr
    print(" ".join(expr._prefixcode([])))
    print("==============")

def main():
    testfiles = top / "testfiles"
    for tf in testfiles.iterdir():
        print(f"==== {tf}")
        parse = file_parser.parse(tf.read_text())
        #print(parse.pretty())
        parse = transf.transform(parse)
        for d in parse.children:
            print(d.pretty())
            if d.data == "let":
                checkexpr(d.children[1])
            elif d.data == "test":
                checkexpr(d.children[0])
                checkexpr(d.children[1])
                print("Equiv?", d.children[0].equiv(d.children[1]))

if __name__ == '__main__':
    main()
