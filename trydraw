#!/usr/bin/env python3

import draw
import parse

def show_expr(lc):
    expr = parse.parse_expr(lc)

    grid = draw.draw_expr(expr)
    grid.print()
    pc = expr.prefixcode(debruijn=True)
    print(pc)
    score = 0
    for t in pc.split():
        if t == "." or t == "λ^":
            score += 2
        elif t == "^":
            pass
        else:
            score += 2 + int(t)
    print(score)

# Various expressions of Graham's Number
# https://mindsarentmagic.org/2012/11/22/lambda-graham/
# https://mindsarentmagic.org/2020/02/19/a-picture-of-grahams-number/

# Version from my original blog post of 2012 - 120 bits
#show_expr("(λc2 c3.(λc4. c3 c4 (λn. n (λf b. b f (λx. x)) (λb f. c3 (b f)) c3) c4) (c2 c2)) (λf x. f (f x)) (λf x. f (f (f x)))")

# Failed optimization - cache 4 - 117 bits
#show_expr("(λc4 c3. c3 c4 (λn. n (λf b. b f (λx. x)) (λb f. c3 (b f)) c3) c4) (λf x. f (f (f x))) ((λx. x x)(λf x. f (f x)))")

# New best version - 116 bits
show_expr("(λc3 c2. c3 (c2 c2) (λn. n (λf b. b f (λx. x)) (λb f. c3 (b f)) c3) (c2 c2)) (λf x. f (f (f x))) (λf x. f (f x))")
